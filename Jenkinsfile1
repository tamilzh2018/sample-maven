pipeline {
    agent any
    environment {
        SONARQUBE_URL = credentials('sonarqube_url')
        SONARQUBE_TOKEN = credentials('sonarqube_token')
        NEXUS_URL = credentials('nexus_url')
        NEXUS_REPO = 'maven-releases'
        MAVEN_HOME = '/usr/local/maven'
    }
    stages {
        stage('Build') {
            steps {
                sh "'${MAVEN_HOME}/bin/mvn' clean package"
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        sh "'${MAVEN_HOME}/bin/mvn' clean verify sonar:sonar -Dsonar.projectKey=${env.JOB_NAME} -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONARQUBE_TOKEN}"
                    }
                }
            }
        }
        stage('Run Tests') {
            steps {
                script {
                    sh "'${MAVEN_HOME}/bin/mvn' clean test"
                }
            }
            post {
                always {
                    junit '**/target/test-*.xml'
                }
            }
        }
        stage('Deploy to Nexus') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'nexus_credentials', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                        sh """
                        if [[ "\$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" =~ .*SNAPSHOT.* ]]; then
                            '${MAVEN_HOME}/bin/mvn' clean deploy -DaltDeploymentRepository=snapshots::default::${NEXUS_URL}/repository/maven-snapshots -Dusername=${NEXUS_USER} -Dpassword=${NEXUS_PASS}
                        else
                            '${MAVEN_HOME}/bin/mvn' clean deploy -DaltDeploymentRepository=releases::default::${NEXUS_URL}/repository/maven-releases -Dusername=${NEXUS_USER} -Dpassword=${NEXUS_PASS}
                        fi
                        """
                    }
                }
            }
        }

    }
}
